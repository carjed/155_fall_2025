# Univariate visualization and summaries

```{r include = FALSE, message = FALSE, warning = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE, 
  warning = FALSE,
  message = FALSE,
  error = TRUE)
```


<!-- create student notes from activity in core-->

{{< include _create_student_notes.qmd >}}

```{r}
#| echo: false
#| eval: true
make_student_notes('Univariate visualization and summaries', '_L02-foundations-univariate.qmd')
```

<!-- pull activity from core -->

```{r knitr-opts}
#| echo: false
#| cache: false
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
```

{{< include core/_L02-foundations-univariate.qmd >}}

\
\
\
\



# Solutions

```{r eval = TRUE, echo = FALSE, message = FALSE, warning = FALSE}
# Load package
library(tidyverse)

# Read in the Dear Abby data
abby <- read_csv("https://mac-stat.github.io/data/dear_abby.csv")

# Wrangle the data
abby <- abby %>% 
  filter(year == 2017) %>% 
  mutate(month = month(month, label = TRUE)) %>%
  mutate(
    parents = str_detect(question_only, "mother|mama|mom|father|papa|dad"),
    marriage = str_detect(question_only, "marriage|marry|married"),
    money = str_detect(question_only, "money|finance")
  ) %>%
  rowwise() %>%
  mutate(
    themes = c(
      if (parents) "parents",
      if (marriage) "marriage",
      if (money) "money"
    ) %>% paste(collapse = ", "),
    themes = ifelse(themes == "", "other", themes)
  ) %>%
  ungroup() %>% 
  select(year, month, day, question_only, bing_pos, themes)
```

## Exercise 1: Get curious

-   Results of brainstorming themes will vary
-   From the "Data and Method" section at the end of the Pudding article, we see this paragraph:

> The writers of these questions likely skew roughly 2/3 female (according to Pauline Phillips, who mentions the demographics of responses to a survey she disseminated in 1987), and consequently, their interests are overrepresented; weâ€™ve been unable to find other demographic data surrounding their origins. There is, doubtless, a level of editorializing here: only a fraction of the questions that people have written in have seen publication, because agony aunts (the writers of advice columns) must selectively filter what gets published. Nevertheless, the concerns of the day seem to be represented, such as the HIV/AIDS crisis in the 1980s. Additionally, we believe that the large sample of questions in our corpus (20,000+) that have appeared over recent decades gives a sufficient directional sense of broad trends.

-   Writers of the questions are predominately female. The 2/3 proportion was estimated in 1987, so it would be useful to understand shifts in demographics over time.
-   What questions were chosen to be answered on the column? Likely a small fraction of what got submitted. What themes tended to get cut out?

## Exercise 2: Importing and getting to know the data

a.  Note how clicking the `abby` data causes both a popup pane and the command `View(abby)` to appear in the Console. In fact, the `View()` function is the underlying command that opens a dataset pane. (`View()` should always be entered in the Console and NOT your Quarto document.)

b.  Each row / case corresponds to a single question.

c.  Columns = variables

d.  Try out each function below. Identify what each function tells you about the `abby` data and note this in the `???`:

```{r eval = TRUE}
# First number = number of rows / cases
# Second number = number of columns / variables
dim(abby)

# Number of rows (cases)
nrow(abby)

# Number of columns (variables)
ncol(abby)

# View first few rows of the dataset (6 rows, by default)
head(abby)

# Get all column (variable) names
names(abby)
```

e.  We can display the first 10 rows with `head(abby, n = 10)`.

## Exercise 3: Preparing to summarize and visualize the data

a.  The sentiment variables are `afinn_overall`, `afinn_pos`, `afinn_neg`, and `bing_pos`, and they are **quantitative**. The `afinn` variables don't have units but we can still get a sense of the scale by remembering that each word gets a score between -5 and 5. The `bing_pos` variable doesn't have units because it's a fraction, but we know that it ranges from 0 to 1.

b.  **categorical**

c.  Appropriate visualizations:

    -   single quantitative variable: boxplot, histogram, density plot
    -   single categorical variable: barplot

## Exercise 4: Exploring themes in the letters


a.  Expectations about the plot will vary

```{r eval = TRUE}
ggplot(abby, aes(x = themes)) +
    geom_bar() +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

b.  Counts in the table below match the barplot

```{r eval = TRUE}
# Construct a table of counts
abby %>% 
    count(themes)
```

c.  What do the plot layers do?

```{r eval = TRUE}
# Just sets up the "canvas" of the plot with axis labels
ggplot(abby, aes(x = themes))
```

```{r eval = TRUE}
# Adds the bars
ggplot(abby, aes(x = themes)) +
    geom_bar()
```

```{r eval = TRUE}
# Rotates the x axis labels
ggplot(abby, aes(x = themes)) +
    geom_bar() +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

```{r eval = TRUE}
# Changes the visual theme of the plot with a white background and removes gridlines
ggplot(abby, aes(x = themes)) +
    geom_bar() +
    theme_classic() +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

## Exercise 5: Exploring sentiment


a.  

    -   We might expect the mean of this variable is less than zero given that more negative words might be appear in questions on an advice column.
    -   The code has a similar structure to the barplot in that there is an initial `ggplot()` layer which sets the canvas, then a `+` to add a layer, then the final layer `geom_boxplot()` (like `geom_bar()`) which tells R what type of plot to make.

```{r eval = TRUE}
ggplot(abby, aes(x = afinn_overall)) +
    geom_boxplot()
```

b.  We replace `geom_boxplot()` with `geom_histogram()` and `geom_density()`.
    -   The tallest bar of the histogram indicates that over 7500 questions had an overall `afinn` sentiment score between around -8 to 0.(The -8 to 0 comes from eyeballing where the tallest bar is placed on the x-axis, and the height of this bar indicates how many cases fall into that bin.)
    -   The shape of the distribution: roughly symmetric

```{r eval = TRUE}
# Histogram
ggplot(abby, aes(x = afinn_overall)) +
    geom_histogram()

# Density plot
ggplot(abby, aes(x = afinn_overall)) +
    geom_density()
```

c.  

    -   Boxplot shows min, max, median, 1st and 3rd quartile easily. (It shows median, 1st and 3rd quartile directly as lines)
    -   Histogram and density plot show min and max but the mean and median aren't shown directly--we have to roughly guess based on the peak of the distribution

```{r eval = TRUE}
# Summary statistics
summary(abby$afinn_overall)

abby %>% 
    summarize(mean(afinn_overall, na.rm = TRUE), median(afinn_overall, na.rm = TRUE), sd(afinn_overall, na.rm = TRUE))
```

d.  The distribution of sentiment scores is roughly symmetric with a mean of -1.4 and a similar median of -1. The median and mean are quite similar because the distribution is fairly symmetric. The standard deviation of the sentiment scores is about 11.08 which tells us how much variation there is from the center of the distribution. 11.08 is somewhat high given the IQR of -6 to 3 (which is a span of 9 units).

## Exercise 6: Box plots vs. histograms vs. density plots

a.  Boxplots very clearly show key summary statistics like median, 1st and 3rd quartile
b.  Boxplots can oversimplify by not showing the shape of the distribution.



## Exercise 7: Returning to our context, looking ahead

-   Answers will vary

## Exercise 10: Read in and get to know the weather data

```{r eval = TRUE}
weather <- read_csv("https://raw.githubusercontent.com/Mac-STAT/data/main/weather_3_locations.csv")
```

## Exercise 11: Exploring the data structure

Check out the basic features of the weather data.

```{r eval = TRUE}
# Examine the first six cases
head(weather)

# Find the dimensions of the data
dim(weather)
```

A case represents a day of the year in a particular area (Hobart, Uluru, Wollongong as seen by the `location` variable).

## Exercise 12: Exploring rainfall

The `raintoday` variable contains information about rainfall.

-   `raintoday` is categorical (No, Yes)
-   It is more common to have no rain.

```{r eval = TRUE}
# Visualization
ggplot(weather, aes(x = raintoday)) +
    geom_bar()

# Numerical summaries
weather %>% 
    count(raintoday)
```

## Exercise 13: Exploring temperature

The `maxtemp` variable contains information on the daily high temperature.

-   `maxtemp` is quantitative
-   The *typical* max temperature is around 23 degrees Celsius (with an average of 23.62 and a median of 22 degrees). The max temperatures ranged from 8.6 to 45.4 degrees. Finally, on the typical day, the max temp falls about 7.8 degrees from the mean. There are multiple modes in the distribution of max temperature---this likely reflects the different cities in the dataset.

```{r eval = TRUE}
# Visualization
ggplot(weather, aes(x = maxtemp)) + 
    geom_histogram()

# Numerical summaries
summary(weather$maxtemp)

# There are missing values (NAs) in this variable, so we add
# the na.rm = TRUE argument
weather %>% 
    summarize(sd(maxtemp, na.rm = TRUE))
```

## Exercise 14: Customizing! (CHALLENGE)

a.  

```{r eval = TRUE}
ggplot(weather, aes(x = maxtemp)) + 
    geom_histogram() + 
    labs(x = "Maximum temperature", y = "Number of days", title = "Distribution of max temperatures in Perth")
```

b.  

```{r eval = TRUE}
# Make the bars green
ggplot(weather, aes(x = raintoday)) + 
    geom_bar(fill = "green")
```



