---
title: "Univariate visualization and summaries"
subtitle: "Notes and in-class exercises"
format: 
  html:
    embed-resources: true
    toc: true
---

# Notes

## Learning goals

By the end of this lesson, you should be able to:

- Describe what a **case** (or **unit of analysis**) represents in a dataset.
- Describe what a **variable** represents in a dataset.
- Identify whether a variable is **categorical** or **quantitative** and what summarizations and visualizations are appropriate for that variable
- Write R code to read in data and to summarize and visualize a single variable at a time.
- Interpret key features of barplots, boxplots, histograms, and density plots
- Describe information about the distribution of a quantitative variable using the concepts of shape, center, spread, and outliers
- Relate summary statistics of data to the concepts of shape, center, spread, and outliers

## Readings and videos

Choose either the reading or the videos to go through **before** class.

- Reading: Sections 2.1-2.4, 2.6 in the [STAT 155 Notes](https://mac-stat.github.io/Stat155Notes/)
- Videos:
    - [Univariate visualization and summarization](https://youtu.be/7zQmWTT_m-Y) ([slides](https://drive.google.com/file/d/1QJgnchneN-cHfa2TNa-amBAx6VWO3UGT/view?usp=drive_link))
    - [R Code for Categorical Visualization and Summarization](https://voicethread.com/share/14968914/)
    - [R Code for Quantitative Visualization and Summarization](https://voicethread.com/share/14923042/)

<!-- This section is for any mini-lecture, review material, material to motivate today's lesson, more guided / structured examples than the exercises section below. -->



**File organization:** Save this file in the "Activities" subfolder of your "STAT155" folder.

# Exercises

> **Guiding question:** What can we learn from course evaluation scores?

**Context:** Johns Hopkins University (JHU publishes numeric results for teacher course evaluations [online](https://studentaffairs.jhu.edu/registrar/faculty-staff/course-evaluations/). We have data on course evaluations for all courses offered in the Spring 2019 semester ([source](http://studentaffairs.jhu.edu/registrar/wp-content/uploads/sites/23/2019/07/Spring-2019-Homewood-Completed-courses.pdf)). The following information is available on each course:

- `course_id`: Course ID number
- `avg_rating`: The average of student responses to the question asking them to rate the overall quality of the course using the Likert scale:
    - 1 = Poor
    - 2 = Weak
    - 3 = Fair
    - 4 = Good
    - 5 = Excellent
- `division`: Either `AS` for Arts & Sciences or `EN` for Engineering
- `dept_num`: ID number for the department offering the course
- `dept_name`: Name of the department offering the course

## Exercise 1: Engaging with the data context

The Johns Hopkins University student newspaper plans to use this course evaluation data to publish an article called "The inside scoop: the best courses to take at Hopkins". 

Think about the who, what, when, where, why, and how of the data to inform your stance on this upcoming article.

What benefits could such an article provide? What harms might this article perpetuate? What cautions should the article authors be wary of in using such data?



## Exercise 2: Importing and getting to know the data

```{r setup}
# Load package
library(readr)

# Read in the course evaluation data
evals <- read_csv("https://mac-stat.github.io/data/jhu_evals.csv")
```

a. Click on the Environment tab (generally in the upper right hand pane in RStudio). Then click the `evals` line. The `evals` data will pop up as a separate pane (like viewing a spreadsheet) -- check it out.

b. In this **tidy** dataset, what is the unit of observation? That is, what is represented in each row of the dataset?

c. What term do we use for the columns of the dataset? What other columns of information might be useful to have in exploring course evaluation data?

d. Try out each function below. Identify what each function tells you about the `evals` data and note this in the `???`:

```{r explore}
# ??? [what do both numbers mean?]
dim(evals)

# ???
nrow(evals)

# ???
ncol(evals)

# ???
head(evals)

# ???
names(evals)
```

e. We can learn what functions do by pulling up help pages. To do this, click inside the Console pane, and enter `?function_name`. For example, to pull up a help page for the `dim()` function, we can type `?dim` and hit Enter. Pull up the help page for the `head()` function.
    - Read the Description.
    - **Challenge:** Look at the **Arguments** and **Examples** sections to figure out how to display the first 10 rows of the `evals` data (instead of the default first 6 rows).



## Exercise 3: Preparing to summarize and visualize the data

a. For each of the 5 variables in the `evals` data, identify whether the variable is **quantitative** or **categorical**.
b. What visualizations are appropriate for looking at the distribution of a single quantitative variable? What about a single categorical variable?



## Exercise 4: Exploring the number of courses across divisions

Are the numbers of courses taught in the Arts & Sciences and the Engineering divisions roughly the same?

a. The code below makes a **barplot** using the `ggplot2` visualization package. *Before making the plot*, make note of what you expect the plot might look like. (This could be an unfamiliar context--just do your best!) *Then* compare to what you observe when you run the code chunk to make the plot. (Clearly defining your expectations first is good scientific practice to avoid confirmation bias.)

```{r}
# Load package
library(ggplot2)

# barplot
ggplot(evals, aes(x = division)) +
    geom_bar()
```

b. We can follow up on the barplot with a simple numerical summary. Whereas the `ggplot2` package is great for visualizations, `dplyr` is great for numerical summaries. The code below constructs a table of the number of courses in each division. Make sure that these numerical summaries match up with what you saw in the barplot.

```{r}
# Load package
library(dplyr)

# Construct a table of counts
evals %>% 
    count(division)
```

c. Before proceeding, let's break down the plotting code above. Run each chunk to see how the two lines of code above build up the plot in "layers". Add comments (on the lines starting with `#`) to document what you notice.

```{r}
# ???
ggplot(evals, aes(x = division))
```

```{r}
# ???
ggplot(evals, aes(x = division)) +
    geom_bar()
```

```{r}
# ???
ggplot(evals, aes(x = division)) +
    geom_bar() +
    theme_classic()
```



## Exercise 5: Exploring course overall ratings

Now we'll look at the distribution of the `avg_rating` variable and associated summary statistics.

a. The code below creates a **boxplot** of this variable. In the comment, make note of how this code is simliar to the code for the barplot above. As in the previous exercise, *before* running the code chunk to create the plot, make note of what you expect the boxplot to look like.

```{r}
# ???
ggplot(evals, aes(x = avg_rating)) +
    geom_boxplot()
```

b. **Challenge:** Using the code for the barplot and boxplot as a guide, try to make a **histogram** and a **density** plot of the overall average ratings.
    - What information is given by the tallest bar of the histogram?
    - How would you describe the shape of the distribution?

```{r}
# Histogram

# Density plot

```

c. We can compute summary statistics (numerical summaries) for a quantitative variable using the `summary()` function or with the `summarize()` function from the `dplyr` package. (`1st Qu.` and `3rd Qu.` stand for first and third quartile.) After inspecting these summaries, look back to your boxplot, histogram, and density plot. Which plots show which summaries most clearly?

```{r}
# Summary statistics
## Using summary() - convenient for computing many summaries in one command
## Does not show the standard deviation
summary(evals$avg_rating)

# Using summarize() from dplyr
# Note that we use %>% to pipe the data into the summarize() function
evals %>% 
    summarize(mean(avg_rating), median(avg_rating), sd(avg_rating))
```

d. Write a good paragraph describing the information in the histogram (or density plot) by discussing shape, center, spread, and outliers. Incorporate the numerical summaries from part c.

e. Looking at the summary statistics, compare the mean to the median, and relate this to the shape of the distribution of average ratings. What would the distribution probably look like if the ordering of the mean and median were reversed?



## Exercise 6: Box plots vs. histograms vs. density plots

We took 3 different approaches to plotting the quantitative average course variable above. They all have pros and cons.

a. What is one pro about the boxplot in comparison to the histogram and density plot?
b. What is one con about the boxplot in comparison to the histogram and density plots?
c. In this example, which plot do you prefer and why?



## Exercise 7: Cautions about summary statistics

The code below generates hypothetical data from 3 different courses with 20 students each. For each student we have their rating of the overall course quality on the scale:

- 1 = Poor
- 2 = Weak
- 3 = Fair
- 4 = Good
- 5 = Excellent

The datasets are called `course1`, `course2`, and `course3`.

```{r}
course1 <- tibble(
    student_id = paste0("s", 1:20),
    rating = c(rep(1, 2), rep(2, 4), rep(3, 8), rep(4, 4), rep(5, 2))
)

course2 <- tibble(
    student_id = paste0("s", 1:20),
    rating = c(rep(2, 10), rep(4, 10))
)

course3 <- tibble(
    student_id = paste0("s", 1:20),
    rating = c(rep(1, 9), rep(3, 1), rep(4, 2), rep(5, 8))
)
```

a. For each course, make an appropriate plot showing the distribution of student ratings. Put yourself in the professor's shoes and briefly summarize the information that the plot gives.

```{r}
# Plot the distribution of ratings for each course

```

b. Now compute the mean rating for each course.

```{r}
# Compute the mean rating for each course

```

c. Consider a school policy that ranks professors based on this mean rating and uses the rankings for evaluation and promotion purposes. Based on your investigations, would such a policy be fair?



## Exercise 8: Returning to our context, looking ahead

In this activity, we've started to explore course evaluation data, with a focus on exploring a single variable at a time.

- In big picture terms, what have we learned about average ratings in general and about course ratings at Johns Hopkins in Spring 2019?
- What further curiosities might students, teachers, and administrators have about course ratings?



## Exercise 9: Different ways to think about data visualization 

In working with and visualizing data, it's important to keep in mind what a data point *represents*. It can reflect the experience of a real person. It might reflect the sentiment in a piece of art. It might reflect history. We've taken one very narrow and technical approach to data visualization. Check out the following examples, and write some notes about anything you find interesting.

- [Dear Data](http://www.dear-data.com/by-week)
- [W.E.B. DuBois](https://hyperallergic.com/476334/how-w-e-b-du-bois-meticulously-visualized-20th-century-black-america/)
- [Decolonizing Data Viz](https://stephanieevergreen.com/decolonizing-data-viz/)
- [Phase Change Project (by Prof Kim, Mac research students)](http://www.variableprojects.com/#/phase-change/)



## Exercise 10: Rendering your work

Save this file, and then click the "Render" button in the menu bar for this pane (blue arrow pointing right). This will create an HTML file containing all of the directions, code, and responses from this activity. A preview of the HTML will appear in the browser.

- Scroll through and inspect the document to see how your work was translated into this HTML format. Neat!
- Close the browser tab.
- Go to the "Background Jobs" pane in RStudio and click the Stop button to end the rendering process.
- Navigate to your "Activities" subfolder within your "STAT155" folder and locate the HTML file. You can open it again in your browser to double check.



## Reflection

Go to the top of this file and review the learning objectives for this lesson. Which objectives do you have a good handle on, are at least familiar with, or are struggling with? What feels challenging right now? What are some wins from the day?

> **Response:** Put your response here.




# Additional Practice

If you have time and want additional practice, try out the following exercises.

## Exercise 11: Read in and get to know the weather data

Daily weather data are available for 3 locations in Perth, Australia.

- View the codebook [here](https://github.com/Mac-STAT/data/blob/main/weather_3_locations_codebook.md).
- Complete the code below to read in the data.

```{r}
# Replace the ??? with your own name for the weather data
# Replace the ___ with the correct function
??? <- ___("https://mac-stat.github.io/data/weather_3_locations.csv")
```



## Exercise 12: Exploring the data structure

Check out the basic features of the weather data.

```{r}
# Examine the first six cases

# Find the dimensions of the data

```

What does a case represent in this data?



## Exercise 13: Exploring rainfall

The `raintoday` variable contains information about rainfall.

- Is this variable quantitative or categorical?
- Create an appropriate visualization, and compute appropriate numerical summaries.
- What do you learn about rainfall in Perth?

```{r}
# Visualization

# Numerical summaries

```



## Exercise 14: Exploring temperature

The `maxtemp` variable contains information on the daily high temperature.

- Is this variable quantitative or categorical?
- Create an appropriate visualization, and compute appropriate numerical summaries.
- What do you learn about high temperatures in Perth?

```{r}
# Visualization

# Numerical summaries

```


## Exercise 15: Customizing! (CHALLENGE)

Though you will naturally absorb some RStudio code throughout the semester, being an effective statistical thinker and "programmer" does not require that we memorize *all* code. That would be impossible! In contrast, using the *foundation* you built today, do some digging online to learn how to customize your visualizations.    

a. For the histogram below, add a title and more meaningful axis labels.  Specifically, title the plot "Distribution of max temperatures in Perth", change the x-axis label to "Maximum temperature" and y-axis label to "Number of days".  HINT: Do a Google search for something like "add axis labels ggplot".

```{r}
# Add a title and axis labels
ggplot(weather, aes(x = maxtemp)) + 
    geom_histogram()
```

b. Adjust the code below in order to color the bars green.  NOTE: Color can be an effective tool, but here it is simply gratuitous.     

```{r}
# Make the bars green
ggplot(weather, aes(x = raintoday)) + 
    geom_bar()
```

c. Check out the `ggplot2` [cheat sheet](https://rstudio.github.io/cheatsheets/data-visualization.pdf). Try making some of the other kinds of univariate plots outlined there.

d. What else would you like to change about your plot? Try it!



<br><br><br><br><br><br>



# Solutions


## Exercise 1: Engaging with the data context

- Who 
- What are students told about how course evaluations are used? What about faculty and administrators? What does the course evaluation survey platform look like? (Is it easy to use? Does its design promote users completing the whole survey?)
- When 
- Where is course evaluation data shared?
- Why is course evaluation data collected?

A news article in the student newspaper on course evaluations could help students get a sense of the demands of different courses. It also surfaces a danger of misrepresenting faculty members
What benefits could such an article provide? What harms might this article perpetuate? What cautions should the article authors be wary of in using such data?



## Exercise 2: Importing and getting to know the data

a. Note how clicking the `evals` data causes both a popup pane and the command `View(evals)` to appear in the Console. In fact, the `View()` function is the underlying command that opens a dataset pane. (`View()` should always be entered in the Console and NOT your Quarto document.)

b. Each row / case corresponds to a single course.

c. Columns = variables. It might be useful to have information on class size, how many times the course has been taught, etc.

d. Try out each function below. Identify what each function tells you about the `evals` data and note this in the `???`:

```{r explore}
# First number = number of rows / cases
# Second number = number of columns / variables
dim(evals)

# Number of rows (cases)
nrow(evals)

# Number of columns (variables)
ncol(evals)

# View first few rows of the dataset (6 rows, by default)
head(evals)

# Get all column (variable) names
names(evals)
```

e. We can display the first 10 rows with `head(evals, n = 10)`.



## Exercise 3: Preparing to summarize and visualize the data

a.
    - categorical: `course_id`, `division`, `dept_num` (yes even though this is a number, the numbers don't have a meaningful order and are just categories), `dept_name.
    - quantitative: `avg_rating`

b.
    - single quantitative variable: boxplot, histogram, density plot
    - single categorical variable: barplot



## Exercise 4: Exploring the number of courses across divisions

Are the numbers of courses taught in the Arts & Sciences and the Engineering divisions roughly the same?

a. This is a challenging contextual question without familiarity with the US university culture, but engineering classes at research universities tend to be large lecture classes, so more students are served with fewer courses. In contrast, small seminar courses are more common in the arts and sciences division, so there tend to be more of them. This is in fact, what we see in the barplot.

```{r}
# Load package
library(ggplot2)

# barplot
ggplot(evals, aes(x = division)) +
    geom_bar()
```

b. Counts in the table below match the barplot

```{r}
# Load package
library(dplyr)

# Construct a table of counts
evals %>% 
    count(division)
```

c. 

```{r}
# Just sets up the "canvas" of the plot with axis labels
ggplot(evals, aes(x = division))
```

```{r}
# Adds the bars
ggplot(evals, aes(x = division)) +
    geom_bar()
```

```{r}
# Changes the visual theme of the plot with a white background and removes gridlines
ggplot(evals, aes(x = division)) +
    geom_bar() +
    theme_classic()
```



## Exercise 5: Exploring course overall ratings

Now we'll look at the distribution of the `avg_rating` variable and associated summary statistics.

a. We might expect the mean of this variable to be greater than 3 assuming that most courses are rated favorably.

```{r}
# This creates a boxplot of avg_rating
ggplot(evals, aes(x = avg_rating)) +
    geom_boxplot()
```

b. We replace `geom_boxplot()` with `geom_histogram()` and `geom_density()`.
    - The tallest bar of the histogram indicates that close to 120 courses have an average rating between about 4.4-4.5. (The 4.4-4.5 comes from eyeballing where the tallest bar is placed on the x-axis, and the height of this bar indicates how many cases fall into that bin.)
    - The shape of the distribution: left-skewed (mostly larger values with some small outliers)

```{r}
# Histogram
ggplot(evals, aes(x = avg_rating)) +
    geom_histogram()

# Density plot
ggplot(evals, aes(x = avg_rating)) +
    geom_density()
```

c.
    - Boxplot shows min, max, median, 1st and 3rd quartile easily. (It shows median, 1st and 3rd quartile directly as lines)
    - Histogram and density plot show min and max but the mean and median aren't shown directly--we have to roughly guess based on the peak of the distribution

```{r}
# Summary statistics
summary(evals$avg_rating)
```

d. The distribution of average ratings is left-skewed with an overall mean average rating of 4.302 (what are the units? who knows??). The median of the average ratings is a little higher at about 4.4 because the left skew pulls the mean down. The standard deviation of the average ratings is about 0.48, which could be seen as a large amount of spread because a professor might feel qualitatively different if their course's rating increased or decreased by that amount. The left skew also means that there are low outliers (for example, the course with an average rating of 2).

e. Here, the mean is a little bit lower than the median because the distribution is (slightly) left skewed. If the mean were greater than the median, the distribution would likely look right-skewed.



## Exercise 6: Box plots vs. histograms vs. density plots

a. Boxplots very clearly show key summary statistics like median, 1st and 3rd quartile
b. Boxplots can oversimplify by not showing the shape of the distribution.



## Exercise 7: Cautions about summary statistics

a. The professor of the first course might feel that they did a pretty average job. For the second course, the professor seems rather polarizing. For the third, the professor seems to have not done well for a sizeable portion fo the students but ok for the others. Overall, three very qualitatively different pictures of courses.

```{r}
# Plot the distribution of ratings for each course
ggplot(course1, aes(x = rating)) +
    geom_bar()
ggplot(course2, aes(x = rating)) +
    geom_bar()
ggplot(course3, aes(x = rating)) +
    geom_bar()
```

b. Mean rating for each course is 3!

```{r}
# Compute the mean rating for each course
# One way: using summary()
summary(course1$rating)
summary(course2$rating)
summary(course3$rating)

# Another way: using summarize() from the dplyr package
course1 %>% 
    summarize(mean(rating))
course2 %>% 
    summarize(mean(rating))
course3 %>% 
    summarize(mean(rating))
```

c. Ranking courses by mean rating can be very misleading and thus dangerous. As we've seen, a single summary statistic (like a mean) conveys very little information about the full distribution.



## Exercise 8: Returning to our context, looking ahead

In this activity, we've started to explore course evaluation data, with a focus on exploring a single variable at a time.

- Average ratings of Likert scale responses have unclear units and meaning. They summarize the data, but hide key aspects of the distribution of course ratings that are important to see.
- Average course ratings at JHU in Spring 2019 generally appear "high". (Would we say that an average close to 4 is high?) But there are courses that are outliers in terms of low rating.
- Different stakeholders in education might be interested in breaking down average ratings by division, department, course level, etc.


## Exercise 11: Read in and get to know the weather data

```{r}
weather <- read_csv("https://raw.githubusercontent.com/Mac-STAT/data/main/weather_3_locations.csv")
```



## Exercise 12: Exploring the data structure

Check out the basic features of the weather data.

```{r}
# Examine the first six cases
head(weather)

# Find the dimensions of the data
dim(weather)
```

A case represents a day of the year in a particular area (Hobart, Uluru, Wollongong as seen by the `location` variable).



## Exercise 13: Exploring rainfall

The `raintoday` variable contains information about rainfall.

- `raintoday` is categorical (No, Yes)
- It is more common to have no rain.

```{r}
# Visualization
ggplot(weather, aes(x = raintoday)) +
    geom_bar()

# Numerical summaries
weather %>% 
    count(raintoday)
```



## Exercise 14: Exploring temperature

The `maxtemp` variable contains information on the daily high temperature.

- `maxtemp` is quantitative
- The *typical* max temperature is around 23 degrees Celsius (with an average of 23.62 and a median of 22 degrees). The max temperatures ranged from 8.6 to 45.4 degrees. Finally, on the typical day, the max temp falls about 7.8 degrees from the mean. There are multiple modes in the distribution of max temperature---this likely reflects the different cities in the dataset.

```{r}
# Visualization
ggplot(weather, aes(x = maxtemp)) + 
    geom_histogram()

# Numerical summaries
summary(weather$maxtemp)

# There are missing values (NAs) in this variable, so we add
# the na.rm = TRUE argument
weather %>% 
    summarize(sd(maxtemp, na.rm = TRUE))
```


## Exercise 15: Customizing! (CHALLENGE)

a.

```{r}
ggplot(weather, aes(x = maxtemp)) + 
    geom_histogram() + 
    labs(x = "Maximum temperature", y = "Number of days", title = "Distribution of max temperatures in Perth")
```

b.   

```{r}
# Make the bars green
ggplot(weather, aes(x = raintoday)) + 
    geom_bar(fill = "green")
```

