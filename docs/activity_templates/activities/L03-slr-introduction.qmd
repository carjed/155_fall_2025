# Simple linear regression: Visualization and Introduction

```{r include = FALSE, message = FALSE, warning = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE, 
  warning = FALSE,
  message = FALSE,
  error = TRUE)
```


<!-- create student notes from activity in core-->

{{< include _create_student_notes.qmd >}}

```{r}
#| echo: false
#| eval: true
make_student_notes('Simple linear regression: Visualization and Introduction', '_L03-slr-introduction.qmd')
```

<!-- pull activity from core -->

```{r knitr-opts}
#| echo: false
#| cache: false
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
```

{{< include core/_L03-slr-introduction.qmd >}}

\
\
\
\





# Solutions

```{r warning = FALSE, message = FALSE, eval = TRUE, echo = FALSE}
# Load packages and import data
library(readr)
library(ggplot2)
library(dplyr)

lifts <- read_csv("https://mac-stat.github.io/data/powerlifting.csv")
lifts <- lifts %>% 
    mutate(SWR = Age/BestSquatKg)
```


## Exercise 1: Get to know the data

a. Use an appropriate function to look at the first few rows of the data.

```{r eval = TRUE}
head(lifts)
```


b. Create a new code chunk, and use an appropriate function to learn how much data we have (in terms of cases and variables).

```{r eval = TRUE}
dim(lifts)
```


c. A case represents an individual lifter at a single weightlifting competition.

d. It looks like some meets may be missing if they weren't detected by the web scraper used by the maintainers of the Open Powerlifting database. They don't describe in detail the process used for transferring PDFs of results to their database, so it's unclear what errors in transcription might have resulted. Still, it's worth taking a moment to appreciate the labor they put into making these results available for passionate powerlifters to explore.


## Exercise 2: Mutating our data

Strength-to-weight ratio (SWR) is defined as `TotalKg`/`BodyweightKg`. We can use the `mutate()` function from the `dplyr` package to create a new variable in our dataframe for `SWR` using the following code:

```{r eval = TRUE}
lifts <- lifts %>% 
    mutate(SWR = TotalKg / BodyweightKg)
```

Adapt the example above to create a new variable called `SWR`, where SWR is defined as `TotalKg`/`BodyweightKg`.

## Exercise 3: Get to know the outcome/response variable

Let's get acquainted with the `SWR` variable.

- Construct an appropriate plot to visualize the distribution of this variable, and compute appropriate numerical summaries.

```{r eval = TRUE}
lifts %>%
  ggplot(aes(SWR)) +
  geom_histogram(bins = 10, col = "black")

lifts %>% summarize(mean(SWR, na.rm = TRUE), min(SWR, na.rm = TRUE), max(SWR, na.rm = TRUE), sd(SWR, na.rm = TRUE))
```


- Write a good paragraph interpreting the plot and numerical summaries.

Strength-to-weight (SWR) ratio ranges from 0.18 to 12.46, with a mean SWR of 4.4. SWR varies about 2.08 units above and below the mean. We observe that most SWRs appear to be centered between 4 and 7, with a slight right-skew to the data. The distribution of SWRs appears to be unimodal. 

## Exercise 4: Data visualization - two quantitative variables

We'd like to visualize the relationship between body weight and the strength-to-weight ratio. A **scatterplot** (or informally, a "point cloud") allows us to do this! The code below creates a scatterplot of body weight vs. SWR using `ggplot()`.

```{r eval = TRUE}
# scatterplot

# The alpha = 0.5 in geom_point() adds transparency to the points
# to make them easier to see. You can make this smaller for more transparency
lifts %>%
  ggplot(aes(x = BodyweightKg, y = SWR)) +
  geom_point(alpha = 0.5)
```


a & b. In our plot aesthetics, we now have *two* variables listed (an "x" and a "y") as opposed to just a single variable. The "geom" for a scatterplot is `geom_point`. Otherwise, the code structure remains very similar!

c. In general, it seems as though higher body weights are associated with lower SWRs. Once body weight (in kg) is greater than 50, the relationship between body weight and SWR appears to be weakly negative, and roughly linear. The points are very dispersed, indicating that there is a good amount of variation in this relationship (hence the term "weak").


## Exercise 5: Scatterplots - patterns in point clouds

Sometimes, it can be easier to see a pattern in a point cloud by adding a **smoothing** line to our scatterplots. The code below adapts the code in Exercise 4 to do this: 

```{r eval = TRUE}
# scatterplot with smoothing line
lifts %>%
  ggplot(aes(x = BodyweightKg, y = SWR)) +
  geom_point(alpha = 0.5) +
  geom_smooth()
```

a. This doesn't change my answer much (but it may have changed yours, and that's okay!). It does appear as though there is a weakly negative relationship between body weight and SWR, particularly once body weight is above a certain value.

b. I would say that yes, a linear relationship here seems reasonable! Even though there is some curvature in the smoothed trend line early on, that is based on **very few** data points. Those data points with low body weights aren't enough to convince me that the relationship couldn't be roughly linear between body weight and SWR.

## Exercise 6: Correlation

b. I would describe the correlation between body weight and SWR as weak and negative.

c. I'll guess -0.1, since the line is negative, and the points are very dispersed around the line!


## Exercise 7: Computing correlation in R


```{r eval = TRUE}
# correlation

# Note: the order in which you put your two quantitative variables into the cor
# function doesn't matter! Try switching them around to confirm this for yourself
# Because of the missing data, we need to include the use = "complete.obs" - otherwise the correlation would be computed as NA
lifts %>%
    summarize(cor(SWR, BodyweightKg, use = "complete.obs"))
```

So close to our guess!

## Exercise 8: Limitations of correlation

```{r eval = TRUE}
# correlation between x1, y1
anscombe %>% summarize(cor(x1, y1))

# correlation between x2, y2
anscombe %>% summarize(cor(x2, y2))

# correlation between x3, y3
anscombe %>% summarize(cor(x3, y3))

# correlation between x4, y4
anscombe %>% summarize(cor(x4, y4))

```

a. Each of these correlations are nearly the same!

b. Each of these correlations is relatively strong, and positive, since 0.8 is positive and closer to 1 than 0.

d. 

```{r eval = TRUE}
# scatterplot: x1, y1
anscombe %>%
  ggplot(aes(x = x1, y = y1)) +
  geom_point()

# scatterplot: x2, y2
anscombe %>%
  ggplot(aes(x = x2, y = y2)) +
  geom_point()

# scatterplot: x3, y3
anscombe %>%
  ggplot(aes(x = x3, y = y3)) +
  geom_point()

# scatterplot: x4, y4
anscombe %>%
  ggplot(aes(x = x4, y = y4)) +
  geom_point()

```

e. The message of this exercise is that data visualization is important *in addition* to numerical summaries! Many different sets of points can have nearly the same correlation, but display very different patterns in point clouds upon closer inspection. Reporting correlation alone is not enough to summarize the relationship between two quantitative variables, and should be accompanied by a scatter plot!

## Exercise 10: Correlation and **extreme** values

```{r eval = TRUE}
# create a toy dataset
set.seed(1234)
x <- rnorm(100, mean = 5, sd = 2)
y <- -3 * x + rnorm(100, sd = 4)
dat <- data.frame(x = x, y = y)
```

a. 

```{r eval = TRUE}
# scatterplot
dat %>% 
  ggplot(aes(x = x, y = y)) +
  geom_point()
```

b. The correlation between x and y is moderately strong and negative.
c. I'll guess -0.6, since the relationship is negative and is sort of in-between weak and strong.
d. 

```{r eval = TRUE}
# correlation
dat %>% summarize(cor(x, y))
```

e. 

```{r eval = TRUE}
# creating dat_new1
x1 <- c(x, 15)
y1 <- c(y, -45)
dat_new1 <- data.frame(x = x1, y = y1)
```

f. 

```{r eval = TRUE}
# scatterplot
dat_new1 %>%
  ggplot(aes(x1, y1)) +
  geom_point()

# correlation
dat %>% summarize(cor(x1, y1))
```
Our correlation stayed roughly the same with the addition of this new point!

g. 

```{r eval = TRUE}
# creating dat_new1
x2 <- c(x, 15)
y2 <- c(y, 45)
dat_new2 <- data.frame(x = x2, y = y2)
```

h. 

```{r eval = TRUE}
# scatterplot
dat_new2 %>%
  ggplot(aes(x2, y2)) +
  geom_point()

# correlation
dat_new2 %>% summarize(cor(x2, y2))
```
The correlation changes quite a bit with the addition of this new point! Something to note is that this new point does not follow the rough linear trend that the original points had, that the first point we considered adding also had. This line seems way off base, comparatively!

i. The takeaway message here is that even though both of these additional points might be considered "outliers" because they have extreme x values, one changes the relationship between x and y much more than the other. In this case, the second point we considered would be **influential** because it changes the observed relationship between all x's and y's much more than the first point we considered. Not all "outliers" are considered equal!

j. 

```{r eval = TRUE}
dat_new1 %>%
  ggplot(aes(x1, y1)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE)

dat_new2 %>%
  ggplot(aes(x2, y2)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE)
```


